/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class DataSet implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DataSet");
  private static final TField COLUMN_NAMES_FIELD_DESC = new TField("column_names", TType.LIST, (short)1);
  private static final TField ROWS_FIELD_DESC = new TField("rows", TType.LIST, (short)2);

  public List<byte[]> column_names;
  public List<Row> rows;
  public static final int COLUMN_NAMES = 1;
  public static final int ROWS = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(COLUMN_NAMES, new FieldMetaData("column_names", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(ROWS, new FieldMetaData("rows", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Row.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DataSet.class, metaDataMap);
  }

  public DataSet() {
  }

  public DataSet(
      List<byte[]> column_names,
      List<Row> rows) {
    this();
    this.column_names = column_names;
    this.rows = rows;
  }

  public static class Builder {
    private List<byte[]> column_names;
    private List<Row> rows;

    public Builder() {
    }

    public Builder setColumn_names(final List<byte[]> column_names) {
      this.column_names = column_names;
      return this;
    }

    public Builder setRows(final List<Row> rows) {
      this.rows = rows;
      return this;
    }

    public DataSet build() {
      DataSet result = new DataSet();
      result.setColumn_names(this.column_names);
      result.setRows(this.rows);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataSet(DataSet other) {
    if (other.isSetColumn_names()) {
      this.column_names = TBaseHelper.deepCopy(other.column_names);
    }
    if (other.isSetRows()) {
      this.rows = TBaseHelper.deepCopy(other.rows);
    }
  }

  public DataSet deepCopy() {
    return new DataSet(this);
  }

  public List<byte[]> getColumn_names() {
    return this.column_names;
  }

  public DataSet setColumn_names(List<byte[]> column_names) {
    this.column_names = column_names;
    return this;
  }

  public void unsetColumn_names() {
    this.column_names = null;
  }

  // Returns true if field column_names is set (has been assigned a value) and false otherwise
  public boolean isSetColumn_names() {
    return this.column_names != null;
  }

  public void setColumn_namesIsSet(boolean __value) {
    if (!__value) {
      this.column_names = null;
    }
  }

  public List<Row> getRows() {
    return this.rows;
  }

  public DataSet setRows(List<Row> rows) {
    this.rows = rows;
    return this;
  }

  public void unsetRows() {
    this.rows = null;
  }

  // Returns true if field rows is set (has been assigned a value) and false otherwise
  public boolean isSetRows() {
    return this.rows != null;
  }

  public void setRowsIsSet(boolean __value) {
    if (!__value) {
      this.rows = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case COLUMN_NAMES:
      if (__value == null) {
        unsetColumn_names();
      } else {
        setColumn_names((List<byte[]>)__value);
      }
      break;

    case ROWS:
      if (__value == null) {
        unsetRows();
      } else {
        setRows((List<Row>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COLUMN_NAMES:
      return getColumn_names();

    case ROWS:
      return getRows();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof DataSet))
      return false;
    DataSet that = (DataSet)_that;

    if (!TBaseHelper.equalsSlow(this.isSetColumn_names(), that.isSetColumn_names(), this.column_names, that.column_names)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetRows(), that.isSetRows(), this.rows, that.rows)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {column_names, rows});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case COLUMN_NAMES:
          if (__field.type == TType.LIST) {
            {
              TList _list17 = iprot.readListBegin();
              this.column_names = new ArrayList<byte[]>(Math.max(0, _list17.size));
              for (int _i18 = 0; 
                   (_list17.size < 0) ? iprot.peekList() : (_i18 < _list17.size); 
                   ++_i18)
              {
                byte[] _elem19;
                _elem19 = iprot.readBinary();
                this.column_names.add(_elem19);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ROWS:
          if (__field.type == TType.LIST) {
            {
              TList _list20 = iprot.readListBegin();
              this.rows = new ArrayList<Row>(Math.max(0, _list20.size));
              for (int _i21 = 0; 
                   (_list20.size < 0) ? iprot.peekList() : (_i21 < _list20.size); 
                   ++_i21)
              {
                Row _elem22;
                _elem22 = new Row();
                _elem22.read(iprot);
                this.rows.add(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_names != null) {
      oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.column_names.size()));
        for (byte[] _iter23 : this.column_names)        {
          oprot.writeBinary(_iter23);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.rows != null) {
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.rows.size()));
        for (Row _iter24 : this.rows)        {
          _iter24.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DataSet");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("column_names");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getColumn_names() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getColumn_names(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("rows");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getRows() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getRows(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

