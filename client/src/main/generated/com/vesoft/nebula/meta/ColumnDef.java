/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ColumnDef implements TBase, java.io.Serializable, Cloneable, Comparable<ColumnDef> {
  private static final TStruct STRUCT_DESC = new TStruct("ColumnDef");
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRUCT, (short)2);
  private static final TField DEFAULT_VALUE_FIELD_DESC = new TField("default_value", TType.STRING, (short)3);
  private static final TField NULLABLE_FIELD_DESC = new TField("nullable", TType.BOOL, (short)4);

  public byte[] name;
  public ColumnTypeDef type;
  public byte[] default_value;
  public boolean nullable;
  public static final int NAME = 1;
  public static final int TYPE = 2;
  public static final int DEFAULT_VALUE = 3;
  public static final int NULLABLE = 4;

  // isset id assignments
  private static final int __NULLABLE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TYPE, new FieldMetaData("type", TFieldRequirementType.REQUIRED, 
        new StructMetaData(TType.STRUCT, ColumnTypeDef.class)));
    tmpMetaDataMap.put(DEFAULT_VALUE, new FieldMetaData("default_value", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(NULLABLE, new FieldMetaData("nullable", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ColumnDef.class, metaDataMap);
  }

  public ColumnDef() {
    this.nullable = false;

  }

  public ColumnDef(
      byte[] name,
      ColumnTypeDef type) {
    this();
    this.name = name;
    this.type = type;
  }

  public ColumnDef(
      byte[] name,
      ColumnTypeDef type,
      byte[] default_value,
      boolean nullable) {
    this();
    this.name = name;
    this.type = type;
    this.default_value = default_value;
    this.nullable = nullable;
    setNullableIsSet(true);
  }

  public static class Builder {
    private byte[] name;
    private ColumnTypeDef type;
    private byte[] default_value;
    private boolean nullable;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setName(final byte[] name) {
      this.name = name;
      return this;
    }

    public Builder setType(final ColumnTypeDef type) {
      this.type = type;
      return this;
    }

    public Builder setDefault_value(final byte[] default_value) {
      this.default_value = default_value;
      return this;
    }

    public Builder setNullable(final boolean nullable) {
      this.nullable = nullable;
      __optional_isset.set(__NULLABLE_ISSET_ID, true);
      return this;
    }

    public ColumnDef build() {
      ColumnDef result = new ColumnDef();
      result.setName(this.name);
      result.setType(this.type);
      result.setDefault_value(this.default_value);
      if (__optional_isset.get(__NULLABLE_ISSET_ID)) {
        result.setNullable(this.nullable);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnDef(ColumnDef other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = TBaseHelper.deepCopy(other.name);
    }
    if (other.isSetType()) {
      this.type = TBaseHelper.deepCopy(other.type);
    }
    if (other.isSetDefault_value()) {
      this.default_value = TBaseHelper.deepCopy(other.default_value);
    }
    this.nullable = TBaseHelper.deepCopy(other.nullable);
  }

  public ColumnDef deepCopy() {
    return new ColumnDef(this);
  }

  public byte[] getName() {
    return this.name;
  }

  public ColumnDef setName(byte[] name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean __value) {
    if (!__value) {
      this.name = null;
    }
  }

  public ColumnTypeDef getType() {
    return this.type;
  }

  public ColumnDef setType(ColumnTypeDef type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean __value) {
    if (!__value) {
      this.type = null;
    }
  }

  public byte[] getDefault_value() {
    return this.default_value;
  }

  public ColumnDef setDefault_value(byte[] default_value) {
    this.default_value = default_value;
    return this;
  }

  public void unsetDefault_value() {
    this.default_value = null;
  }

  // Returns true if field default_value is set (has been assigned a value) and false otherwise
  public boolean isSetDefault_value() {
    return this.default_value != null;
  }

  public void setDefault_valueIsSet(boolean __value) {
    if (!__value) {
      this.default_value = null;
    }
  }

  public boolean isNullable() {
    return this.nullable;
  }

  public ColumnDef setNullable(boolean nullable) {
    this.nullable = nullable;
    setNullableIsSet(true);
    return this;
  }

  public void unsetNullable() {
    __isset_bit_vector.clear(__NULLABLE_ISSET_ID);
  }

  // Returns true if field nullable is set (has been assigned a value) and false otherwise
  public boolean isSetNullable() {
    return __isset_bit_vector.get(__NULLABLE_ISSET_ID);
  }

  public void setNullableIsSet(boolean __value) {
    __isset_bit_vector.set(__NULLABLE_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case NAME:
      if (__value == null) {
        unsetName();
      } else {
        setName((byte[])__value);
      }
      break;

    case TYPE:
      if (__value == null) {
        unsetType();
      } else {
        setType((ColumnTypeDef)__value);
      }
      break;

    case DEFAULT_VALUE:
      if (__value == null) {
        unsetDefault_value();
      } else {
        setDefault_value((byte[])__value);
      }
      break;

    case NULLABLE:
      if (__value == null) {
        unsetNullable();
      } else {
        setNullable((Boolean)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case DEFAULT_VALUE:
      return getDefault_value();

    case NULLABLE:
      return new Boolean(isNullable());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof ColumnDef))
      return false;
    ColumnDef that = (ColumnDef)_that;

    if (!TBaseHelper.equalsSlow(this.isSetName(), that.isSetName(), this.name, that.name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetType(), that.isSetType(), this.type, that.type)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetDefault_value(), that.isSetDefault_value(), this.default_value, that.default_value)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetNullable(), that.isSetNullable(), this.nullable, that.nullable)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {name, type, default_value, nullable});
  }

  @Override
  public int compareTo(ColumnDef other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(name, other.name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(type, other.type);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDefault_value()).compareTo(other.isSetDefault_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(default_value, other.default_value);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNullable()).compareTo(other.isSetNullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(nullable, other.nullable);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case NAME:
          if (__field.type == TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TYPE:
          if (__field.type == TType.STRUCT) {
            this.type = new ColumnTypeDef();
            this.type.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DEFAULT_VALUE:
          if (__field.type == TType.STRING) {
            this.default_value = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NULLABLE:
          if (__field.type == TType.BOOL) {
            this.nullable = iprot.readBool();
            setNullableIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      this.type.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.default_value != null) {
      if (isSetDefault_value()) {
        oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
        oprot.writeBinary(this.default_value);
        oprot.writeFieldEnd();
      }
    }
    if (isSetNullable()) {
      oprot.writeFieldBegin(NULLABLE_FIELD_DESC);
      oprot.writeBool(this.nullable);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ColumnDef");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getName() == null) {
      sb.append("null");
    } else {
        int __name_size = Math.min(this.getName().length, 128);
        for (int i = 0; i < __name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getName()[i]).length() > 1 ? Integer.toHexString(this.getName()[i]).substring(Integer.toHexString(this.getName()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getName()[i]).toUpperCase());
        }
        if (this.getName().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("type");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getType() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getType(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetDefault_value())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("default_value");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getDefault_value() == null) {
        sb.append("null");
      } else {
          int __default_value_size = Math.min(this.getDefault_value().length, 128);
          for (int i = 0; i < __default_value_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getDefault_value()[i]).length() > 1 ? Integer.toHexString(this.getDefault_value()[i]).substring(Integer.toHexString(this.getDefault_value()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getDefault_value()[i]).toUpperCase());
          }
          if (this.getDefault_value().length > 128) sb.append(" ...");
      }
      first = false;
    }
    if (isSetNullable())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("nullable");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.isNullable(), indent + 1, prettyPrint));
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (name == null) {
      throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'type' was not present! Struct: " + toString());
    }
  }

}

