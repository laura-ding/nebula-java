/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class BalanceTask implements TBase, java.io.Serializable, Cloneable, Comparable<BalanceTask> {
  private static final TStruct STRUCT_DESC = new TStruct("BalanceTask");
  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)1);
  private static final TField RESULT_FIELD_DESC = new TField("result", TType.I32, (short)2);

  public byte[] id;
  /**
   * 
   * @see TaskResult
   */
  public TaskResult result;
  public static final int ID = 1;
  public static final int RESULT = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(BalanceTask.class, metaDataMap);
  }

  public BalanceTask() {
  }

  public BalanceTask(
      byte[] id,
      TaskResult result) {
    this();
    this.id = id;
    this.result = result;
  }

  public static class Builder {
    private byte[] id;
    private TaskResult result;

    public Builder() {
    }

    public Builder setId(final byte[] id) {
      this.id = id;
      return this;
    }

    public Builder setResult(final TaskResult result) {
      this.result = result;
      return this;
    }

    public BalanceTask build() {
      BalanceTask result = new BalanceTask();
      result.setId(this.id);
      result.setResult(this.result);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BalanceTask(BalanceTask other) {
    if (other.isSetId()) {
      this.id = TBaseHelper.deepCopy(other.id);
    }
    if (other.isSetResult()) {
      this.result = TBaseHelper.deepCopy(other.result);
    }
  }

  public BalanceTask deepCopy() {
    return new BalanceTask(this);
  }

  public byte[] getId() {
    return this.id;
  }

  public BalanceTask setId(byte[] id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean __value) {
    if (!__value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see TaskResult
   */
  public TaskResult getResult() {
    return this.result;
  }

  /**
   * 
   * @see TaskResult
   */
  public BalanceTask setResult(TaskResult result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  // Returns true if field result is set (has been assigned a value) and false otherwise
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean __value) {
    if (!__value) {
      this.result = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ID:
      if (__value == null) {
        unsetId();
      } else {
        setId((byte[])__value);
      }
      break;

    case RESULT:
      if (__value == null) {
        unsetResult();
      } else {
        setResult((TaskResult)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ID:
      return getId();

    case RESULT:
      return getResult();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof BalanceTask))
      return false;
    BalanceTask that = (BalanceTask)_that;

    if (!TBaseHelper.equalsSlow(this.isSetId(), that.isSetId(), this.id, that.id)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetResult(), that.isSetResult(), this.result, that.result)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {id, result});
  }

  @Override
  public int compareTo(BalanceTask other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id, other.id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(result, other.result);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ID:
          if (__field.type == TType.STRING) {
            this.id = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case RESULT:
          if (__field.type == TType.I32) {
            this.result = TaskResult.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeBinary(this.id);
      oprot.writeFieldEnd();
    }
    if (this.result != null) {
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeI32(this.result == null ? 0 : this.result.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("BalanceTask");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("id");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getId() == null) {
      sb.append("null");
    } else {
        int __id_size = Math.min(this.getId().length, 128);
        for (int i = 0; i < __id_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getId()[i]).length() > 1 ? Integer.toHexString(this.getId()[i]).substring(Integer.toHexString(this.getId()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getId()[i]).toUpperCase());
        }
        if (this.getId().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("result");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getResult() == null) {
      sb.append("null");
    } else {
      String result_name = this.getResult() == null ? "null" : this.getResult().name();
      if (result_name != null) {
        sb.append(result_name);
        sb.append(" (");
      }
      sb.append(this.getResult());
      if (result_name != null) {
        sb.append(")");
      }
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

