/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AlterSchemaItem implements TBase, java.io.Serializable, Cloneable, Comparable<AlterSchemaItem> {
  private static final TStruct STRUCT_DESC = new TStruct("AlterSchemaItem");
  private static final TField OP_FIELD_DESC = new TField("op", TType.I32, (short)1);
  private static final TField SCHEMA_FIELD_DESC = new TField("schema", TType.STRUCT, (short)2);

  /**
   * 
   * @see AlterSchemaOp
   */
  public AlterSchemaOp op;
  public Schema schema;
  public static final int OP = 1;
  public static final int SCHEMA = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(OP, new FieldMetaData("op", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SCHEMA, new FieldMetaData("schema", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Schema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AlterSchemaItem.class, metaDataMap);
  }

  public AlterSchemaItem() {
  }

  public AlterSchemaItem(
      AlterSchemaOp op,
      Schema schema) {
    this();
    this.op = op;
    this.schema = schema;
  }

  public static class Builder {
    private AlterSchemaOp op;
    private Schema schema;

    public Builder() {
    }

    public Builder setOp(final AlterSchemaOp op) {
      this.op = op;
      return this;
    }

    public Builder setSchema(final Schema schema) {
      this.schema = schema;
      return this;
    }

    public AlterSchemaItem build() {
      AlterSchemaItem result = new AlterSchemaItem();
      result.setOp(this.op);
      result.setSchema(this.schema);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AlterSchemaItem(AlterSchemaItem other) {
    if (other.isSetOp()) {
      this.op = TBaseHelper.deepCopy(other.op);
    }
    if (other.isSetSchema()) {
      this.schema = TBaseHelper.deepCopy(other.schema);
    }
  }

  public AlterSchemaItem deepCopy() {
    return new AlterSchemaItem(this);
  }

  /**
   * 
   * @see AlterSchemaOp
   */
  public AlterSchemaOp getOp() {
    return this.op;
  }

  /**
   * 
   * @see AlterSchemaOp
   */
  public AlterSchemaItem setOp(AlterSchemaOp op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  // Returns true if field op is set (has been assigned a value) and false otherwise
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean __value) {
    if (!__value) {
      this.op = null;
    }
  }

  public Schema getSchema() {
    return this.schema;
  }

  public AlterSchemaItem setSchema(Schema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  // Returns true if field schema is set (has been assigned a value) and false otherwise
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean __value) {
    if (!__value) {
      this.schema = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case OP:
      if (__value == null) {
        unsetOp();
      } else {
        setOp((AlterSchemaOp)__value);
      }
      break;

    case SCHEMA:
      if (__value == null) {
        unsetSchema();
      } else {
        setSchema((Schema)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OP:
      return getOp();

    case SCHEMA:
      return getSchema();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AlterSchemaItem))
      return false;
    AlterSchemaItem that = (AlterSchemaItem)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetOp(), that.isSetOp(), this.op, that.op)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSchema(), that.isSetSchema(), this.schema, that.schema)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {op, schema});
  }

  @Override
  public int compareTo(AlterSchemaItem other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(op, other.op);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(schema, other.schema);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case OP:
          if (__field.type == TType.I32) {
            this.op = AlterSchemaOp.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SCHEMA:
          if (__field.type == TType.STRUCT) {
            this.schema = new Schema();
            this.schema.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.op != null) {
      oprot.writeFieldBegin(OP_FIELD_DESC);
      oprot.writeI32(this.op == null ? 0 : this.op.getValue());
      oprot.writeFieldEnd();
    }
    if (this.schema != null) {
      oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
      this.schema.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AlterSchemaItem");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("op");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getOp() == null) {
      sb.append("null");
    } else {
      String op_name = this.getOp() == null ? "null" : this.getOp().name();
      if (op_name != null) {
        sb.append(op_name);
        sb.append(" (");
      }
      sb.append(this.getOp());
      if (op_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("schema");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSchema() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSchema(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

