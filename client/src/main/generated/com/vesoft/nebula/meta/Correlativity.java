/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Correlativity implements TBase, java.io.Serializable, Cloneable, Comparable<Correlativity> {
  private static final TStruct STRUCT_DESC = new TStruct("Correlativity");
  private static final TField PART_ID_FIELD_DESC = new TField("part_id", TType.I32, (short)1);
  private static final TField PROPORTION_FIELD_DESC = new TField("proportion", TType.DOUBLE, (short)2);

  public int part_id;
  public double proportion;
  public static final int PART_ID = 1;
  public static final int PROPORTION = 2;

  // isset id assignments
  private static final int __PART_ID_ISSET_ID = 0;
  private static final int __PROPORTION_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PART_ID, new FieldMetaData("part_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PROPORTION, new FieldMetaData("proportion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Correlativity.class, metaDataMap);
  }

  public Correlativity() {
  }

  public Correlativity(
      int part_id,
      double proportion) {
    this();
    this.part_id = part_id;
    setPart_idIsSet(true);
    this.proportion = proportion;
    setProportionIsSet(true);
  }

  public static class Builder {
    private int part_id;
    private double proportion;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setPart_id(final int part_id) {
      this.part_id = part_id;
      __optional_isset.set(__PART_ID_ISSET_ID, true);
      return this;
    }

    public Builder setProportion(final double proportion) {
      this.proportion = proportion;
      __optional_isset.set(__PROPORTION_ISSET_ID, true);
      return this;
    }

    public Correlativity build() {
      Correlativity result = new Correlativity();
      if (__optional_isset.get(__PART_ID_ISSET_ID)) {
        result.setPart_id(this.part_id);
      }
      if (__optional_isset.get(__PROPORTION_ISSET_ID)) {
        result.setProportion(this.proportion);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Correlativity(Correlativity other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.part_id = TBaseHelper.deepCopy(other.part_id);
    this.proportion = TBaseHelper.deepCopy(other.proportion);
  }

  public Correlativity deepCopy() {
    return new Correlativity(this);
  }

  public int getPart_id() {
    return this.part_id;
  }

  public Correlativity setPart_id(int part_id) {
    this.part_id = part_id;
    setPart_idIsSet(true);
    return this;
  }

  public void unsetPart_id() {
    __isset_bit_vector.clear(__PART_ID_ISSET_ID);
  }

  // Returns true if field part_id is set (has been assigned a value) and false otherwise
  public boolean isSetPart_id() {
    return __isset_bit_vector.get(__PART_ID_ISSET_ID);
  }

  public void setPart_idIsSet(boolean __value) {
    __isset_bit_vector.set(__PART_ID_ISSET_ID, __value);
  }

  public double getProportion() {
    return this.proportion;
  }

  public Correlativity setProportion(double proportion) {
    this.proportion = proportion;
    setProportionIsSet(true);
    return this;
  }

  public void unsetProportion() {
    __isset_bit_vector.clear(__PROPORTION_ISSET_ID);
  }

  // Returns true if field proportion is set (has been assigned a value) and false otherwise
  public boolean isSetProportion() {
    return __isset_bit_vector.get(__PROPORTION_ISSET_ID);
  }

  public void setProportionIsSet(boolean __value) {
    __isset_bit_vector.set(__PROPORTION_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case PART_ID:
      if (__value == null) {
        unsetPart_id();
      } else {
        setPart_id((Integer)__value);
      }
      break;

    case PROPORTION:
      if (__value == null) {
        unsetProportion();
      } else {
        setProportion((Double)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PART_ID:
      return new Integer(getPart_id());

    case PROPORTION:
      return new Double(getProportion());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Correlativity))
      return false;
    Correlativity that = (Correlativity)_that;

    if (!TBaseHelper.equalsNobinary(this.part_id, that.part_id)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.proportion, that.proportion)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {part_id, proportion});
  }

  @Override
  public int compareTo(Correlativity other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPart_id()).compareTo(other.isSetPart_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part_id, other.part_id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetProportion()).compareTo(other.isSetProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(proportion, other.proportion);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case PART_ID:
          if (__field.type == TType.I32) {
            this.part_id = iprot.readI32();
            setPart_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PROPORTION:
          if (__field.type == TType.DOUBLE) {
            this.proportion = iprot.readDouble();
            setProportionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PART_ID_FIELD_DESC);
    oprot.writeI32(this.part_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PROPORTION_FIELD_DESC);
    oprot.writeDouble(this.proportion);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Correlativity");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("part_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getPart_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("proportion");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getProportion(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

