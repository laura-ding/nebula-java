/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.graph;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AuthResponse implements TBase, java.io.Serializable, Cloneable, Comparable<AuthResponse> {
  private static final TStruct STRUCT_DESC = new TStruct("AuthResponse");
  private static final TField ERROR_CODE_FIELD_DESC = new TField("error_code", TType.I32, (short)1);
  private static final TField ERROR_MSG_FIELD_DESC = new TField("error_msg", TType.STRING, (short)2);
  private static final TField SESSION_ID_FIELD_DESC = new TField("session_id", TType.I64, (short)3);
  private static final TField TIME_ZONE_OFFSET_SECONDS_FIELD_DESC = new TField("time_zone_offset_seconds", TType.I32, (short)4);
  private static final TField TIME_ZONE_NAME_FIELD_DESC = new TField("time_zone_name", TType.STRING, (short)5);

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode error_code;
  public byte[] error_msg;
  public long session_id;
  public int time_zone_offset_seconds;
  public byte[] time_zone_name;
  public static final int ERROR_CODE = 1;
  public static final int ERROR_MSG = 2;
  public static final int SESSION_ID = 3;
  public static final int TIME_ZONE_OFFSET_SECONDS = 4;
  public static final int TIME_ZONE_NAME = 5;

  // isset id assignments
  private static final int __SESSION_ID_ISSET_ID = 0;
  private static final int __TIME_ZONE_OFFSET_SECONDS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ERROR_CODE, new FieldMetaData("error_code", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ERROR_MSG, new FieldMetaData("error_msg", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(SESSION_ID, new FieldMetaData("session_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(TIME_ZONE_OFFSET_SECONDS, new FieldMetaData("time_zone_offset_seconds", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TIME_ZONE_NAME, new FieldMetaData("time_zone_name", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AuthResponse.class, metaDataMap);
  }

  public AuthResponse() {
  }

  public AuthResponse(
      com.vesoft.nebula.ErrorCode error_code) {
    this();
    this.error_code = error_code;
  }

  public AuthResponse(
      com.vesoft.nebula.ErrorCode error_code,
      byte[] error_msg,
      long session_id,
      int time_zone_offset_seconds,
      byte[] time_zone_name) {
    this();
    this.error_code = error_code;
    this.error_msg = error_msg;
    this.session_id = session_id;
    setSession_idIsSet(true);
    this.time_zone_offset_seconds = time_zone_offset_seconds;
    setTime_zone_offset_secondsIsSet(true);
    this.time_zone_name = time_zone_name;
  }

  public static class Builder {
    private com.vesoft.nebula.ErrorCode error_code;
    private byte[] error_msg;
    private long session_id;
    private int time_zone_offset_seconds;
    private byte[] time_zone_name;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setError_code(final com.vesoft.nebula.ErrorCode error_code) {
      this.error_code = error_code;
      return this;
    }

    public Builder setError_msg(final byte[] error_msg) {
      this.error_msg = error_msg;
      return this;
    }

    public Builder setSession_id(final long session_id) {
      this.session_id = session_id;
      __optional_isset.set(__SESSION_ID_ISSET_ID, true);
      return this;
    }

    public Builder setTime_zone_offset_seconds(final int time_zone_offset_seconds) {
      this.time_zone_offset_seconds = time_zone_offset_seconds;
      __optional_isset.set(__TIME_ZONE_OFFSET_SECONDS_ISSET_ID, true);
      return this;
    }

    public Builder setTime_zone_name(final byte[] time_zone_name) {
      this.time_zone_name = time_zone_name;
      return this;
    }

    public AuthResponse build() {
      AuthResponse result = new AuthResponse();
      result.setError_code(this.error_code);
      result.setError_msg(this.error_msg);
      if (__optional_isset.get(__SESSION_ID_ISSET_ID)) {
        result.setSession_id(this.session_id);
      }
      if (__optional_isset.get(__TIME_ZONE_OFFSET_SECONDS_ISSET_ID)) {
        result.setTime_zone_offset_seconds(this.time_zone_offset_seconds);
      }
      result.setTime_zone_name(this.time_zone_name);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthResponse(AuthResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetError_code()) {
      this.error_code = TBaseHelper.deepCopy(other.error_code);
    }
    if (other.isSetError_msg()) {
      this.error_msg = TBaseHelper.deepCopy(other.error_msg);
    }
    this.session_id = TBaseHelper.deepCopy(other.session_id);
    this.time_zone_offset_seconds = TBaseHelper.deepCopy(other.time_zone_offset_seconds);
    if (other.isSetTime_zone_name()) {
      this.time_zone_name = TBaseHelper.deepCopy(other.time_zone_name);
    }
  }

  public AuthResponse deepCopy() {
    return new AuthResponse(this);
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode getError_code() {
    return this.error_code;
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public AuthResponse setError_code(com.vesoft.nebula.ErrorCode error_code) {
    this.error_code = error_code;
    return this;
  }

  public void unsetError_code() {
    this.error_code = null;
  }

  // Returns true if field error_code is set (has been assigned a value) and false otherwise
  public boolean isSetError_code() {
    return this.error_code != null;
  }

  public void setError_codeIsSet(boolean __value) {
    if (!__value) {
      this.error_code = null;
    }
  }

  public byte[] getError_msg() {
    return this.error_msg;
  }

  public AuthResponse setError_msg(byte[] error_msg) {
    this.error_msg = error_msg;
    return this;
  }

  public void unsetError_msg() {
    this.error_msg = null;
  }

  // Returns true if field error_msg is set (has been assigned a value) and false otherwise
  public boolean isSetError_msg() {
    return this.error_msg != null;
  }

  public void setError_msgIsSet(boolean __value) {
    if (!__value) {
      this.error_msg = null;
    }
  }

  public long getSession_id() {
    return this.session_id;
  }

  public AuthResponse setSession_id(long session_id) {
    this.session_id = session_id;
    setSession_idIsSet(true);
    return this;
  }

  public void unsetSession_id() {
    __isset_bit_vector.clear(__SESSION_ID_ISSET_ID);
  }

  // Returns true if field session_id is set (has been assigned a value) and false otherwise
  public boolean isSetSession_id() {
    return __isset_bit_vector.get(__SESSION_ID_ISSET_ID);
  }

  public void setSession_idIsSet(boolean __value) {
    __isset_bit_vector.set(__SESSION_ID_ISSET_ID, __value);
  }

  public int getTime_zone_offset_seconds() {
    return this.time_zone_offset_seconds;
  }

  public AuthResponse setTime_zone_offset_seconds(int time_zone_offset_seconds) {
    this.time_zone_offset_seconds = time_zone_offset_seconds;
    setTime_zone_offset_secondsIsSet(true);
    return this;
  }

  public void unsetTime_zone_offset_seconds() {
    __isset_bit_vector.clear(__TIME_ZONE_OFFSET_SECONDS_ISSET_ID);
  }

  // Returns true if field time_zone_offset_seconds is set (has been assigned a value) and false otherwise
  public boolean isSetTime_zone_offset_seconds() {
    return __isset_bit_vector.get(__TIME_ZONE_OFFSET_SECONDS_ISSET_ID);
  }

  public void setTime_zone_offset_secondsIsSet(boolean __value) {
    __isset_bit_vector.set(__TIME_ZONE_OFFSET_SECONDS_ISSET_ID, __value);
  }

  public byte[] getTime_zone_name() {
    return this.time_zone_name;
  }

  public AuthResponse setTime_zone_name(byte[] time_zone_name) {
    this.time_zone_name = time_zone_name;
    return this;
  }

  public void unsetTime_zone_name() {
    this.time_zone_name = null;
  }

  // Returns true if field time_zone_name is set (has been assigned a value) and false otherwise
  public boolean isSetTime_zone_name() {
    return this.time_zone_name != null;
  }

  public void setTime_zone_nameIsSet(boolean __value) {
    if (!__value) {
      this.time_zone_name = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ERROR_CODE:
      if (__value == null) {
        unsetError_code();
      } else {
        setError_code((com.vesoft.nebula.ErrorCode)__value);
      }
      break;

    case ERROR_MSG:
      if (__value == null) {
        unsetError_msg();
      } else {
        setError_msg((byte[])__value);
      }
      break;

    case SESSION_ID:
      if (__value == null) {
        unsetSession_id();
      } else {
        setSession_id((Long)__value);
      }
      break;

    case TIME_ZONE_OFFSET_SECONDS:
      if (__value == null) {
        unsetTime_zone_offset_seconds();
      } else {
        setTime_zone_offset_seconds((Integer)__value);
      }
      break;

    case TIME_ZONE_NAME:
      if (__value == null) {
        unsetTime_zone_name();
      } else {
        setTime_zone_name((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ERROR_CODE:
      return getError_code();

    case ERROR_MSG:
      return getError_msg();

    case SESSION_ID:
      return new Long(getSession_id());

    case TIME_ZONE_OFFSET_SECONDS:
      return new Integer(getTime_zone_offset_seconds());

    case TIME_ZONE_NAME:
      return getTime_zone_name();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AuthResponse))
      return false;
    AuthResponse that = (AuthResponse)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetError_code(), that.isSetError_code(), this.error_code, that.error_code)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetError_msg(), that.isSetError_msg(), this.error_msg, that.error_msg)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSession_id(), that.isSetSession_id(), this.session_id, that.session_id)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTime_zone_offset_seconds(), that.isSetTime_zone_offset_seconds(), this.time_zone_offset_seconds, that.time_zone_offset_seconds)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetTime_zone_name(), that.isSetTime_zone_name(), this.time_zone_name, that.time_zone_name)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {error_code, error_msg, session_id, time_zone_offset_seconds, time_zone_name});
  }

  @Override
  public int compareTo(AuthResponse other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetError_code()).compareTo(other.isSetError_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(error_code, other.error_code);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetError_msg()).compareTo(other.isSetError_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(error_msg, other.error_msg);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(session_id, other.session_id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTime_zone_offset_seconds()).compareTo(other.isSetTime_zone_offset_seconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(time_zone_offset_seconds, other.time_zone_offset_seconds);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTime_zone_name()).compareTo(other.isSetTime_zone_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(time_zone_name, other.time_zone_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ERROR_CODE:
          if (__field.type == TType.I32) {
            this.error_code = com.vesoft.nebula.ErrorCode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ERROR_MSG:
          if (__field.type == TType.STRING) {
            this.error_msg = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SESSION_ID:
          if (__field.type == TType.I64) {
            this.session_id = iprot.readI64();
            setSession_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TIME_ZONE_OFFSET_SECONDS:
          if (__field.type == TType.I32) {
            this.time_zone_offset_seconds = iprot.readI32();
            setTime_zone_offset_secondsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TIME_ZONE_NAME:
          if (__field.type == TType.STRING) {
            this.time_zone_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.error_code != null) {
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.error_code == null ? 0 : this.error_code.getValue());
      oprot.writeFieldEnd();
    }
    if (this.error_msg != null) {
      if (isSetError_msg()) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeBinary(this.error_msg);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSession_id()) {
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.session_id);
      oprot.writeFieldEnd();
    }
    if (isSetTime_zone_offset_seconds()) {
      oprot.writeFieldBegin(TIME_ZONE_OFFSET_SECONDS_FIELD_DESC);
      oprot.writeI32(this.time_zone_offset_seconds);
      oprot.writeFieldEnd();
    }
    if (this.time_zone_name != null) {
      if (isSetTime_zone_name()) {
        oprot.writeFieldBegin(TIME_ZONE_NAME_FIELD_DESC);
        oprot.writeBinary(this.time_zone_name);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AuthResponse");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("error_code");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getError_code() == null) {
      sb.append("null");
    } else {
      String error_code_name = this.getError_code() == null ? "null" : this.getError_code().name();
      if (error_code_name != null) {
        sb.append(error_code_name);
        sb.append(" (");
      }
      sb.append(this.getError_code());
      if (error_code_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (isSetError_msg())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("error_msg");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getError_msg() == null) {
        sb.append("null");
      } else {
          int __error_msg_size = Math.min(this.getError_msg().length, 128);
          for (int i = 0; i < __error_msg_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getError_msg()[i]).length() > 1 ? Integer.toHexString(this.getError_msg()[i]).substring(Integer.toHexString(this.getError_msg()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getError_msg()[i]).toUpperCase());
          }
          if (this.getError_msg().length > 128) sb.append(" ...");
      }
      first = false;
    }
    if (isSetSession_id())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("session_id");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getSession_id(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetTime_zone_offset_seconds())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("time_zone_offset_seconds");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getTime_zone_offset_seconds(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetTime_zone_name())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("time_zone_name");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getTime_zone_name() == null) {
        sb.append("null");
      } else {
          int __time_zone_name_size = Math.min(this.getTime_zone_name().length, 128);
          for (int i = 0; i < __time_zone_name_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getTime_zone_name()[i]).length() > 1 ? Integer.toHexString(this.getTime_zone_name()[i]).substring(Integer.toHexString(this.getTime_zone_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getTime_zone_name()[i]).toUpperCase());
          }
          if (this.getTime_zone_name().length > 128) sb.append(" ...");
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (error_code == null) {
      throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'error_code' was not present! Struct: " + toString());
    }
  }

}

