/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class OrderBy implements TBase, java.io.Serializable, Cloneable, Comparable<OrderBy> {
  private static final TStruct STRUCT_DESC = new TStruct("OrderBy");
  private static final TField PROP_FIELD_DESC = new TField("prop", TType.STRING, (short)1);
  private static final TField DIRECTION_FIELD_DESC = new TField("direction", TType.I32, (short)2);

  public byte[] prop;
  /**
   * 
   * @see OrderDirection
   */
  public OrderDirection direction;
  public static final int PROP = 1;
  public static final int DIRECTION = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PROP, new FieldMetaData("prop", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(DIRECTION, new FieldMetaData("direction", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(OrderBy.class, metaDataMap);
  }

  public OrderBy() {
  }

  public OrderBy(
      byte[] prop,
      OrderDirection direction) {
    this();
    this.prop = prop;
    this.direction = direction;
  }

  public static class Builder {
    private byte[] prop;
    private OrderDirection direction;

    public Builder() {
    }

    public Builder setProp(final byte[] prop) {
      this.prop = prop;
      return this;
    }

    public Builder setDirection(final OrderDirection direction) {
      this.direction = direction;
      return this;
    }

    public OrderBy build() {
      OrderBy result = new OrderBy();
      result.setProp(this.prop);
      result.setDirection(this.direction);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderBy(OrderBy other) {
    if (other.isSetProp()) {
      this.prop = TBaseHelper.deepCopy(other.prop);
    }
    if (other.isSetDirection()) {
      this.direction = TBaseHelper.deepCopy(other.direction);
    }
  }

  public OrderBy deepCopy() {
    return new OrderBy(this);
  }

  public byte[] getProp() {
    return this.prop;
  }

  public OrderBy setProp(byte[] prop) {
    this.prop = prop;
    return this;
  }

  public void unsetProp() {
    this.prop = null;
  }

  // Returns true if field prop is set (has been assigned a value) and false otherwise
  public boolean isSetProp() {
    return this.prop != null;
  }

  public void setPropIsSet(boolean __value) {
    if (!__value) {
      this.prop = null;
    }
  }

  /**
   * 
   * @see OrderDirection
   */
  public OrderDirection getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see OrderDirection
   */
  public OrderBy setDirection(OrderDirection direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  // Returns true if field direction is set (has been assigned a value) and false otherwise
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean __value) {
    if (!__value) {
      this.direction = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case PROP:
      if (__value == null) {
        unsetProp();
      } else {
        setProp((byte[])__value);
      }
      break;

    case DIRECTION:
      if (__value == null) {
        unsetDirection();
      } else {
        setDirection((OrderDirection)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PROP:
      return getProp();

    case DIRECTION:
      return getDirection();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof OrderBy))
      return false;
    OrderBy that = (OrderBy)_that;

    if (!TBaseHelper.equalsSlow(this.isSetProp(), that.isSetProp(), this.prop, that.prop)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDirection(), that.isSetDirection(), this.direction, that.direction)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {prop, direction});
  }

  @Override
  public int compareTo(OrderBy other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProp()).compareTo(other.isSetProp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(prop, other.prop);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(direction, other.direction);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case PROP:
          if (__field.type == TType.STRING) {
            this.prop = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DIRECTION:
          if (__field.type == TType.I32) {
            this.direction = OrderDirection.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.prop != null) {
      oprot.writeFieldBegin(PROP_FIELD_DESC);
      oprot.writeBinary(this.prop);
      oprot.writeFieldEnd();
    }
    if (this.direction != null) {
      oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
      oprot.writeI32(this.direction == null ? 0 : this.direction.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("OrderBy");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("prop");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getProp() == null) {
      sb.append("null");
    } else {
        int __prop_size = Math.min(this.getProp().length, 128);
        for (int i = 0; i < __prop_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getProp()[i]).length() > 1 ? Integer.toHexString(this.getProp()[i]).substring(Integer.toHexString(this.getProp()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getProp()[i]).toUpperCase());
        }
        if (this.getProp().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("direction");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getDirection() == null) {
      sb.append("null");
    } else {
      String direction_name = this.getDirection() == null ? "null" : this.getDirection().name();
      if (direction_name != null) {
        sb.append(direction_name);
        sb.append(" (");
      }
      sb.append(this.getDirection());
      if (direction_name != null) {
        sb.append(")");
      }
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

