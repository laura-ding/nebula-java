/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class EdgeKey implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("EdgeKey");
  private static final TField SRC_FIELD_DESC = new TField("src", TType.STRUCT, (short)1);
  private static final TField EDGE_TYPE_FIELD_DESC = new TField("edge_type", TType.I32, (short)2);
  private static final TField RANKING_FIELD_DESC = new TField("ranking", TType.I64, (short)3);
  private static final TField DST_FIELD_DESC = new TField("dst", TType.STRUCT, (short)4);

  public com.vesoft.nebula.Value src;
  public int edge_type;
  public long ranking;
  public com.vesoft.nebula.Value dst;
  public static final int SRC = 1;
  public static final int EDGE_TYPE = 2;
  public static final int RANKING = 3;
  public static final int DST = 4;

  // isset id assignments
  private static final int __EDGE_TYPE_ISSET_ID = 0;
  private static final int __RANKING_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SRC, new FieldMetaData("src", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class)));
    tmpMetaDataMap.put(EDGE_TYPE, new FieldMetaData("edge_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(RANKING, new FieldMetaData("ranking", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(DST, new FieldMetaData("dst", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(EdgeKey.class, metaDataMap);
  }

  public EdgeKey() {
  }

  public EdgeKey(
      com.vesoft.nebula.Value src,
      int edge_type,
      long ranking,
      com.vesoft.nebula.Value dst) {
    this();
    this.src = src;
    this.edge_type = edge_type;
    setEdge_typeIsSet(true);
    this.ranking = ranking;
    setRankingIsSet(true);
    this.dst = dst;
  }

  public static class Builder {
    private com.vesoft.nebula.Value src;
    private int edge_type;
    private long ranking;
    private com.vesoft.nebula.Value dst;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setSrc(final com.vesoft.nebula.Value src) {
      this.src = src;
      return this;
    }

    public Builder setEdge_type(final int edge_type) {
      this.edge_type = edge_type;
      __optional_isset.set(__EDGE_TYPE_ISSET_ID, true);
      return this;
    }

    public Builder setRanking(final long ranking) {
      this.ranking = ranking;
      __optional_isset.set(__RANKING_ISSET_ID, true);
      return this;
    }

    public Builder setDst(final com.vesoft.nebula.Value dst) {
      this.dst = dst;
      return this;
    }

    public EdgeKey build() {
      EdgeKey result = new EdgeKey();
      result.setSrc(this.src);
      if (__optional_isset.get(__EDGE_TYPE_ISSET_ID)) {
        result.setEdge_type(this.edge_type);
      }
      if (__optional_isset.get(__RANKING_ISSET_ID)) {
        result.setRanking(this.ranking);
      }
      result.setDst(this.dst);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdgeKey(EdgeKey other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSrc()) {
      this.src = TBaseHelper.deepCopy(other.src);
    }
    this.edge_type = TBaseHelper.deepCopy(other.edge_type);
    this.ranking = TBaseHelper.deepCopy(other.ranking);
    if (other.isSetDst()) {
      this.dst = TBaseHelper.deepCopy(other.dst);
    }
  }

  public EdgeKey deepCopy() {
    return new EdgeKey(this);
  }

  public com.vesoft.nebula.Value getSrc() {
    return this.src;
  }

  public EdgeKey setSrc(com.vesoft.nebula.Value src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  // Returns true if field src is set (has been assigned a value) and false otherwise
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean __value) {
    if (!__value) {
      this.src = null;
    }
  }

  public int getEdge_type() {
    return this.edge_type;
  }

  public EdgeKey setEdge_type(int edge_type) {
    this.edge_type = edge_type;
    setEdge_typeIsSet(true);
    return this;
  }

  public void unsetEdge_type() {
    __isset_bit_vector.clear(__EDGE_TYPE_ISSET_ID);
  }

  // Returns true if field edge_type is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_type() {
    return __isset_bit_vector.get(__EDGE_TYPE_ISSET_ID);
  }

  public void setEdge_typeIsSet(boolean __value) {
    __isset_bit_vector.set(__EDGE_TYPE_ISSET_ID, __value);
  }

  public long getRanking() {
    return this.ranking;
  }

  public EdgeKey setRanking(long ranking) {
    this.ranking = ranking;
    setRankingIsSet(true);
    return this;
  }

  public void unsetRanking() {
    __isset_bit_vector.clear(__RANKING_ISSET_ID);
  }

  // Returns true if field ranking is set (has been assigned a value) and false otherwise
  public boolean isSetRanking() {
    return __isset_bit_vector.get(__RANKING_ISSET_ID);
  }

  public void setRankingIsSet(boolean __value) {
    __isset_bit_vector.set(__RANKING_ISSET_ID, __value);
  }

  public com.vesoft.nebula.Value getDst() {
    return this.dst;
  }

  public EdgeKey setDst(com.vesoft.nebula.Value dst) {
    this.dst = dst;
    return this;
  }

  public void unsetDst() {
    this.dst = null;
  }

  // Returns true if field dst is set (has been assigned a value) and false otherwise
  public boolean isSetDst() {
    return this.dst != null;
  }

  public void setDstIsSet(boolean __value) {
    if (!__value) {
      this.dst = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SRC:
      if (__value == null) {
        unsetSrc();
      } else {
        setSrc((com.vesoft.nebula.Value)__value);
      }
      break;

    case EDGE_TYPE:
      if (__value == null) {
        unsetEdge_type();
      } else {
        setEdge_type((Integer)__value);
      }
      break;

    case RANKING:
      if (__value == null) {
        unsetRanking();
      } else {
        setRanking((Long)__value);
      }
      break;

    case DST:
      if (__value == null) {
        unsetDst();
      } else {
        setDst((com.vesoft.nebula.Value)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SRC:
      return getSrc();

    case EDGE_TYPE:
      return new Integer(getEdge_type());

    case RANKING:
      return new Long(getRanking());

    case DST:
      return getDst();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof EdgeKey))
      return false;
    EdgeKey that = (EdgeKey)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetSrc(), that.isSetSrc(), this.src, that.src)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.edge_type, that.edge_type)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.ranking, that.ranking)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDst(), that.isSetDst(), this.dst, that.dst)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {src, edge_type, ranking, dst});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SRC:
          if (__field.type == TType.STRUCT) {
            this.src = new com.vesoft.nebula.Value();
            this.src.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case EDGE_TYPE:
          if (__field.type == TType.I32) {
            this.edge_type = iprot.readI32();
            setEdge_typeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case RANKING:
          if (__field.type == TType.I64) {
            this.ranking = iprot.readI64();
            setRankingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DST:
          if (__field.type == TType.STRUCT) {
            this.dst = new com.vesoft.nebula.Value();
            this.dst.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.src != null) {
      oprot.writeFieldBegin(SRC_FIELD_DESC);
      this.src.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EDGE_TYPE_FIELD_DESC);
    oprot.writeI32(this.edge_type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RANKING_FIELD_DESC);
    oprot.writeI64(this.ranking);
    oprot.writeFieldEnd();
    if (this.dst != null) {
      oprot.writeFieldBegin(DST_FIELD_DESC);
      this.dst.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("EdgeKey");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("src");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSrc() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSrc(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edge_type");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getEdge_type(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("ranking");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getRanking(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("dst");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getDst() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getDst(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

